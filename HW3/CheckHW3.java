// To check HW3:
// First copy this file and input.txt into directory with your assignment
// Run the following commands:
// make
// javac CheckHW3.java
// java CheckHW3

import java.io.*;
import java.util.regex.*;
import java.util.ArrayList;

class CheckHW3 {


    // Convenient method to print error message and exit
    // Input: String message to be printed
    // Output: void, simply exits program

    private static void errExit(String message) {

        System.err.println(message);
        System.exit(1);
    }



    // Method to check if validity line is valid
    // Input: line
    // Output: boolean, if the validity line is valid, returns true

    private static boolean checkIfValidityValid(String line) {
        line = line.trim();
        boolean valid = true;
        String[] parts = line.split(" ");
        for(int i = 0; i < parts.length; i++) {
            String p = parts[i];
            if (!(p.equals("Valid") || p.equals("Invalid"))) {
                valid = false;
            }
        }
        return valid;
    }

    // Method to check if validity line is valid
    // Input: line
    // Output: boolean, if the validity line is valid, returns true

    private static boolean checkIfCheckValid(String line) {
        line = line.trim();
        if (line.equals("All kings safe"))
            return true;
        if (line.equals("White in check") || line.equals("White checkmated"))
            return true;
        if (line.equals("Black in check") || line.equals("Black checkmated"))
            return true;
        if (line.equals("White in check Black in check") || line.equals("Black in check White in check"))
            return true;
        return false;
    }

    // Method to read the solution from solution.txt generated by your program
    // Input: Filename passed via command line agrument
    // Output: boolean, it comes handy to say whether a particular case passed or not

    private static boolean readFromSolutionFile(String file) {

        // ready the arguments before reading
        int count = 1;

        try {
            BufferedReader reader = new BufferedReader(new FileReader(file));
            String line;
            while ((line = reader.readLine()) != null) {
                String validity_line = line;
                String check_status_line = reader.readLine();
                boolean validity_valid = checkIfValidityValid(validity_line);
                boolean check_valid = checkIfCheckValid(check_status_line);
                boolean valid = validity_valid && check_valid;   
                if (valid) {
                    System.out.println("Case " + count+ " passed");
                } else {
                    System.out.println("Case " + count+ " failed");
                    if (!validity_valid)
                        System.out.println("  Validity line wrong");
                    if (!check_valid)
                        System.out.println("  Check/checkmate line wrong");
                }
                count++;                   
            }
            reader.close();

            
        }
        catch (IndexOutOfBoundsException e) {
            errExit("Array index is out of bounds"); // throw error when inserting elements into arrays fail
        }
        catch (Exception e) {
            errExit("Exception occurred trying to read file"); // throw a generic exception if failure to read occurs
        }
        return true;
    }


    // Main method
    // Input: filename as command line argument
    // Output: void

    public static void main(String[] args) {

        try {
            Process proc = Runtime.getRuntime().exec(new String[]{"java", "-jar", "Chessmoves.jar"});
            BufferedReader reader =
                new BufferedReader(new InputStreamReader(proc.getInputStream()));
            while ((reader.readLine()) != null) {}
            proc.waitFor();
          }
          catch(Exception e) {
            errExit("Student's program thows an exception: " + e);
          }
     
          // call the respective methods to read from file and display the chessboard
          readFromSolutionFile("analysis.txt");
    }

}

// End